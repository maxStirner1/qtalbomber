.. -*-restructuredtext-*-

=====================================
Developpers' C++ language style guide
===================================== 


Introduction
------------

This bit could state that code should be laid out to be clear to someone else
familiar with C++ and the Qt framework. Functions should be short and easily
understood. Comments should be provided to explain the rationale for code which
is not obvious, and to document behavior of functions. The guidelines can be
broken if necessary to achieve a clearer layout.

This style can be generated with the following arguments to GNU indent:

    -i4 -npsl -di0 -br -nce -d0 -cli0 -npcs -nfc1 -nut -ncs


Guidelines cheat sheet
----------------------

    * Opening braces are given on the same lines as statements, or on the
      following line at the start of a function definition.
    * Code inside a block (whether surrounded by braces or not) is indented by
      four space characters. Tab characters are not used. Comments are indented
      to the same level as the surrounding code.
    * Closing braces are always on a separate line from surrounding code, and
      are indented to line up with the start of the text on the line containing
      the corresponding opening brace.
    * Functions are declared with ANSI-style arguments (type followed by
      argument name).
    * There is no space between the function name and the opening bracket
      of the arguments to the function. There is a single space following
      commas in argument lists and the semi-colons in for statements.
    * Inside a switch() statement, the case keywords are indented to the same
      level as the switch line.
    * Operators in expressions should be surrounded by a single space before
      and after, except for unary increment (++), decrement (--), and negation (!)
      operators.
    * There is no whitespace between a cast and the item modified 
      (e.g.,"(int)j" and not "(int) j").
    * If a cast is to a pointer type, there is a space between the type and the
      character (e.g., "(char *)i" instead of "(char*)i")
    * Use PascalCase for class names, camelCase for function names and
      lower_with_under for variable name. Attributes of a class are
      preceded with a 'm_' (as member).


Naming Conventions
------------------

Naming conventions make programs more understandable by making them
easier to read. They can also give information about the function of the
identifier-for example, whether it's a constant, package, or class-which
can be helpful in understanding the code.


1. Packages
    
Packages name are always written in all-lowercase ASCII
letters.


2. Classes

Class names should be nouns, in mixed case with the first letter of each
internal word capitalized. Try to keep your class names simple and descriptive.
Use whole words-avoid acronyms and abbreviations (unless the abbreviation is
much more widely used than the long form, such as URL or HTML).

Example:
    class Raster;
    class ImageSprite;


3. Interfaces

Interface names should be capitalized like class names.


4. Methods

Methods should be verbs, in mixed case with the first letter lowercase, with
the first letter of each internal word capitalized.
    
Example:
    run();
    runFast();
    getBackground();


5. Variables
    
Variables are lowercase words separated by underscores. Attribute of
classes have a "m_" prefix (for member).

Variable names should be short yet meaningful. The choice of a variable name
should be mnemonic- that is, designed to indicate to the casual observer the
intent of its use. One-character variable names should be avoided except for
temporary "throwaway" variables. Common names for temporary variables are i, j,
k, m, and n for integers; c, d, and e for characters.
    
Example:
    int     i;
    char    c;
    float   my_width;


6. Constants

The names of variables declared class constants and of ANSI constants should be
all uppercase with words separated by underscores ("_"). (ANSI constants should
be avoided, for ease of debugging.)
    
Example:
    static final int MIN_WIDTH = 4;
    static final int MAX_WIDTH = 999;
    static final int GET_THE_CPU = 1;  

9. Enums

Enums are capitalized.


Indentation, General Style
--------------------------

Each level of indentation of code is four spaces. Tab characters should never
be used. Specific indentation rules for function declarations and control-flow
keywords are given below.

Example:

  main(int argc, char **argc)
  {
      if (argc != 0) {
          fprintf(stderr, "No arguments allowed\n");
          exit(1);
      }
      exit(0);
  }

If an expression (or a routine declaration or invocation) would extend past
column 72 (80 in some case), the terms or arguments are wrapped at a convenient
spot and the wrapped portion is indented under the first term in the expression
(or the first argument to the function). Conditional expressions should be
wrapped to keep single or parenthesized terms as atomic as possible, and place
Boolean operators at either the start (preferable) or end of the line.

Example:

   static const char *really_long_name(int i, int j,
                                       const char *args, void *foo,
                                       int k)

   if (cond1 && (item2 || item3) && (!item4)
       && (item5 || item6) && item7) {
       do_a_thing();
   }


Comments
---------

Provide comments which explain the function of code where it is not clear from
the code itself. Provide rationale where necessary for particular bits of code.

Comments should be indented to same level as the surrounding text.

Example:

  code;
  /* comment */
  code;


3. Function Declaration and Layout

Functions are laid out as follows:

  int main(int argc, char **argv)
  {
      code;
  }

The return type is placed on the same line as the function. Arguments (if any)
are given in ANSI style. If no arguments, declare function as void. No space
between function name and opening bracket, single space after comma separating
each argument. The opening brace is placed on the line after the definition,
indented to line up with the start of the return type text. The code is
indented with four spaces, and the closing brace is indented to line up with
the opening brace. Also see the section on indenting long declarations and
invocations.


Function Calls
--------------

Space after commas in function calls. No space between function name and
opening bracket.

  f(a, b);

Also see the section on indenting long declarations and invocations.


Flow-Control Layout
-------------------

Flow-control statements (if, while, for, etc.) are laid out as in this example:

  if (expr) {
      code;
  }
  else {
      code;
  }

There is a space between the keyword and the opening bracket. Opening brace
placed on same line as the flow keyword. The code itself is indented by four
spaces. The closing brace is indented to line up with the opening brace. If an
else clause is used, the else keyword is placed on the line following the
closing brace and is indented to line up with the corresponding if. Also see
the section on indenting long expressions.


"for" Layout
------------

Space after the semi-colons. Example:

  for (a; b; c)


"switch" Layout
---------------

case lines within a switch() are indented to same level as the switch statement
itself. The code for each case is indented by four spaces. Braces are laid out
as for other control-flow keywords. Example:

  switch (x) {
  case a:
      code;
  case b:
      code;
  }


Expressions
-----------

Space before and after assignment and other and operators. No space between
unary operators (increment, decrement, and negation) and the lvalue. Examples:

  a = b
  a + b
  a < b
  a = -b
  a = !b
  ++a

SCM commit messages
-------------------

The commit message is very important. This message is used to show information
about the commit in git log, in various UIs, when requesting a review, and in
the bug fix message if fixing a bug. Fortunately, git provides various ways to
fix commit messages (e.g. git commit --amend) revert changes (git revert, and
others). 

The first line of the commit message is important, since this will be the
summary that is shown when looking at the logs or various UIs. The first line
should contain an informative summary of the patch. If this is a bug fix, use
something like:

BUG: #5551212 - tel syntax should ignore "+()"

That is, the first line contains the bug number and bug description/summary. If
this is not a bug, use something like this:

ADD: support for numeric string syntax

The first line have to start with a keyword that help to know what have be done.
Keywords are verbs in the infinitive forms.

Example:
    ADD, MODIFY, FIX, BUG, DELETE (DEL), REMOVE, ...

Make sure there is a blank line after this summary and before the next line.
This ensures that email, git formatting tools, gitweb, etc. can display the
commit information correctly.

The rest of the commit message should contain more detailed information, such
as the following:

Fix Description:  - to help the reviewer understand what the new code does
                    and how it addresses the problem - please be verbose
Platforms tested: - e.g. Fedora 11, Solaris 10 64bit, etc.
Flag Day:         - yes or no - does this change require other developers to do
                    something?  For example, if you change the pblock structure,
                    this will cause almost the entire server code plus plugins
                    to have to be rebuilt
diffs             - attach files from git format-patch, or links to bug patch
                    attachments if this is a bug fix


Conclusion
----------

BE CONSISTENT

The point of having style guidelines is to have a common vocabulary of
coding so people can concentrate on what you are saying rather than on
how you are saying it.


Acknowledgement
---------------

Document heavily inspired by compiled rules by Paul Sutton for the
Apache project, Java code conventions and by the GSoC python style guide.

